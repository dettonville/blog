[{"content":"Red Hat Ansible Tower supports Ansible Collections starting with version 3.5 - earlier version will not automatically install and configure them for you. To make sure Ansible Collections are recognized by Red Hat Ansible Tower a requirements file is needed and has to be stored in the proper directory.\nAnsible Galaxy is already configured by default, however if you want your Red Hat Ansible Tower to prefer and fetch content from the Red Hat Automation Hub, additional configuration changes are required. They are addressed in a the chapter Use Automation Hub in this lab.\nIn this exercise you will learn how to define an Ansible Collection as a requirement in a format recognized by Red Hat Ansible Tower. We’ll be using the ansible.posix collection again from Ansible Galaxy. As you probably know for Ansible Tower to access the needed bits and pieces a version control system is needed. For the sake of keeping this lab setup easy, we’ll set up a local Git server for this.\nSet up a Local Git Server So, let’s get started. We have to create a simplistic Git server on our control host. Typically you would work with GitHub, GitLab, Gitea, or any other Git server.\nMake sure to run these steps from your users home directory!\n1 2  [student@ansible-1 ~]$ wget https://raw.githubusercontent.com/goetzrieger/ansible-labs-summit2020/master/content/ansible-collections/4-using-collections-from-tower/simple_git.yml [student@ansible-1 ~]$ ansible-playbook simple_git.yml -e \u0026#34;git_project=tower_collections\u0026#34;   Next we will clone the repository on the control host. To enable you to work with git on the command line the SSH key for user ec2-user was already added to the Git user git. Next, clone the repository on the control machine:\n1 2 3 4 5 6  [student@ansible-1 ~]$ git clone git@ansible-1:projects/tower_collections # Message \u0026#34;warning: You appear to have cloned an empty repository.\u0026#34; is OK and can be ignored [student@ansible-1 ~]$ git config --global push.default simple [student@ansible-1 ~]$ git config --global user.name \u0026#34;Your Name\u0026#34; [student@ansible-1 ~]$ git config --global user.email you@example.com [student@ansible-1 ~]$ cd tower_collections/   The repository is currently empty. The three config commands are just there to avoid warnings from Git.\nYou now have a local Git server that can be accessed via SSH from Tower.\nCreate Content for the Ansible Tower Project Red Hat Ansible Tower can download and install Ansible Collections automatically before executing a Job Template. If a collections/requirements.yml exists in your project, it will be parsed and the Ansible Collections specified in this file will be automatically installed.\nStarting with Red Hat Ansible Tower 3.6 the working directory for the Job Template is in /tmp. Since the Ansible Collection is downloaded into this directory before the Job Template is executed, you will not find temporary files of your Ansible Collection in /var/lib/awx/projects/.\nThe format of the requirements.yml for Ansible Collections is very similar to the one for roles, however it is very important to store in the folder collections.\nLet’s create the files needed to see how you can use collections in Ansible Tower. This is of course just a simple example. First create the collections directory in your Git repo (you should have changed into tower_collections already above):\n1 2  [student@ansible-1 tower_collections]$ mkdir collections [student@ansible-1 tower_collections]$ cd collections   Then create the requirements.yml file listing the collection(s) you need:\n1 2 3  ---collections:- ansible.posix  As this is a simple example we’ll just add a Playbook to the Git repo now. Normally you would have a lot more content in your project repository. So what could we do as an example instead of using the ansible.posix collection again? Let’s create a Playbook to configure an at job:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  ---- name:Install AT Jobhosts:alltasks:- name:at command needs to be installedyum:name:atstate:present- name:Schedule a command to execute in 20 minutes as rootansible.posix.at:command:ls -d / \u0026gt;/dev/nullcount:20units:minutes  Save the file as configure_at_job.yml.\nNote the usage of the Fully Qualified Collection Name in the Playbook\nMake sure everything looks fine:\n1 2 3 4 5  [student@ansible-1 tower_collections]$ tree . ├── collections │ └── requirements.yml └── configure_at_job.yml   So far you created the code only locally on the control host, now you are ready to add it to the repository and push it:\n1 2 3  [student@ansible-1 tower_collections]$ git add collections configure_at_job.yml [student@ansible-1 tower_collections]$ git commit -m \u0026#34;Adding requirements.yml and playbook\u0026#34; [student@ansible-1 tower_collections]$ git push   Create the Project and Job Template Now it’s time to access your Ansible Tower web UI if you haven’t done so out of curiosity already. Point your browser to the URL you were given on the lab landing page, similar to https://student\u0026lt;N\u0026gt;.\u0026lt;LABID\u0026gt;.open.redhat.com (replace \u0026lt;N\u0026gt; with your student number and \u0026lt;LABID\u0026gt; with the ID of this lab) and log in as admin. You can find the password again on the lab landing page.\nTo run your new Playbook in Ansible Tower you have to configure a number of objects:\n An Inventory with the managed hosts Machine Credentials to access the managed hosts Git Credentials to access your Git repository via SSH The Git repo as Project A Job Template to run the Playbook  We’ll be a bit verbose for students new to Ansible Tower. If you are an Ansible Tower old-hand, just skip through and finish the configuration steps shown.\nInventory and Machine Credentials The inventory Workshop Inventory and the machine credentials Workshop Credentials have already been created in your lab environment.\nConfigure SCM Credentials Now we will configure the credentials to access our the Git repo on your control host via SSH. In the RESOURCES menu choose Credentials. Now:\nClick the  button to add new credentials\n NAME: Git Credentials ORGANIZATION: Click on the magnifying glass, pick Default and click SELECT CREDENTIAL TYPE: Click on the magnifying glass, pick Source Control as type and click SELECT (you will have to use the search or cycle through the types to find it). USERNAME: ec2-user  As we are using SSH key authentication, you have to provide an SSH private key that can be used to access the host with the Git repo as the user git.\nThe Playbook we used to configure Git added the SSH private key to the authorized_keys of user git\nBring up your code-server terminal on Tower and use cat to get the SSH private key:\n1 2 3 4 5  [ansible-1 ~]$ cat ~/.ssh/aws-private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA2nnL3m5sKvoSy37OZ8DQCTjTIPVmCJt/M02KgDt53+baYAFu1TIkC3Yk+HK1 [...] -----END RSA PRIVATE KEY-----     Copy the complete private key (including “BEGIN” and “END” lines) from the output and paste it into the SSH PRIVATE KEY field in the web UI.\n  Click SAVE\n  You have now setup credentials to access the Git repo on your control host.\nSet up the Project It’s time to set up the Tower Project pointing to your Git repository holding your Playbook and collections requirements file.\n Go to RESOURCES → Projects in the side menu view click the  button. Fill in the form: NAME: Collections Repo ORGANIZATION: Default SCM TYPE: Git  Now you need the URL to access the repo. You could get the URL in Github as Clone URL. Enter the URL into the Project configuration:\n SCM URL: git@ansible-1:projects/tower_collections SCM CREDENTIAL: Click the magnifying glass and choose Git Credentials, click SELECT SCM UPDATE OPTIONS: Tick the first three boxes to always get a fresh copy of the repository and to update the repository when launching a job. Click SAVE  The new Project will be synced automatically after creation. If everything went fine, you should see a green icon to the left of the new Project.\nCreate the Job Template and run it The last step is to create a Job Template to run the Playbook. Go to the Templates view, click the  button and choose Job Template.\n  NAME: Install AT Job\n  JOB TYPE: Run\n  INVENTORY: Workshop Inventory\n  PROJECT: Collections Repo\n  PLAYBOOK: configure_at_job.yml\n  CREDENTIAL: Workshop Credentials\n  We need to run the tasks as root so check Enable privilege escalation\n  Click SAVE\n  You can start the job by directly clicking the blue LAUNCH button, or by clicking on the rocket in the Job Templates overview. After launching the Job Template, you are automatically brought to the job overview where you can follow the playbook execution in real time.\nAfter the Job has finished bring up your VSCode terminal, as the job was run on all three managed nodes and the control/ Ansible Tower node, you can simply check the result here. Run sudo at -l and you should see your job was scheduled successfully.\nTroubleshooting Since Red Hat Ansible Tower does only check for updates in the repository in which you stored your Playbook, it might not do a refresh if there was a change in the Ansible Collection used by your Playbook. This happens particularly if you also combine Roles and Collections.\nIn this case you should check the option Delete on Update which will delete the entire local directory during a refresh.\nIf there is a problem while parsing your requirements.yml it’s worth testing it with the ansible-galaxy command. As a reminder, Red Hat Ansible Tower basically also just runs the command for you with the appropriate parameters, so testing this works manually makes a lot of sense.\n1  ansible-galaxy collection install -r collections/requirements.yml -f   The -f switch will forces a fresh installation of the specified Ansible Collections, otherwise ansible-galaxy will only install it, if it wasn’t already installed. You can also use the --force-with-deps switch to make sure Ansible Collections which have dependencies to others are refreshed as well.\n","date":"2022-03-08T00:00:00Z","permalink":"https://dettonville.github.io/p/collections-in-ansible-tower/","title":"Collections in Ansible Tower"},{"content":"Application Configuration Variables Ansible has many scopes to store a variable state/value enabling flexibility for configurations in a hardware/virtual machine inventory.\nAt the time of playbook execution, Ansible applies variable precedence to derive the value/state for a given variable.\nAnsible observes an order of precedence to derive the value for a variable.\nBasically, a variable definition higher in the precedent list will override the lower level variable setting.\nE.g. A variable in the defaults folder inside a role is easily overridden since it resides much lower in the order of precedence. A variable defined in the vars directory of the role overrides previous versions of that variable in the namespace. Host and/or inventory variables override role defaults, but explicit includes such as the vars directory or an include_vars task override inventory variables. [1].\nSuppose we have a group of applications for a given VM, each with it own set of configuration parameters.\nFor example, consider a stack of applications running on a docker machine.\nTake the following docker-compose example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86  version:\u0026#39;3\u0026#39;services:web:image:ansible/awx:18.container_name:awx_webdepends_on:- redis- postgresports:- \u0026#34;80:8052\u0026#34;hostname:awxwebuser:rootrestart:unless-stoppedvolumes:- supervisor-socket:/var/run/supervisor- rsyslog-socket:/var/run/awx-rsyslog/- rsyslog-config:/var/lib/awx/rsyslog/- \u0026#34;~/.awx/awxcompose/SECRET_KEY:/etc/tower/SECRET_KEY\u0026#34;- \u0026#34;~/.awx/awxcompose/environment.sh:/etc/tower/conf.d/environment.sh\u0026#34;- \u0026#34;~/.awx/awxcompose/credentials.py:/etc/tower/conf.d/credentials.py\u0026#34;- \u0026#34;~/.awx/awxcompose/nginx.conf:/etc/nginx/nginx.conf:ro\u0026#34;- \u0026#34;~/.awx/awxcompose/redis_socket:/var/run/redis/:rw\u0026#34;environment:http_proxy:https_proxy:no_proxy:task:image:ansible/awx:17.1.0container_name:awx_taskdepends_on:- redis- web- postgrescommand:/usr/bin/launch_awx_task.shhostname:awxuser:rootrestart:unless-stoppedvolumes:- supervisor-socket:/var/run/supervisor- rsyslog-socket:/var/run/awx-rsyslog/- rsyslog-config:/var/lib/awx/rsyslog/- \u0026#34;~/.awx/awxcompose/SECRET_KEY:/etc/tower/SECRET_KEY\u0026#34;- \u0026#34;~/.awx/awxcompose/environment.sh:/etc/tower/conf.d/environment.sh\u0026#34;- \u0026#34;~/.awx/awxcompose/credentials.py:/etc/tower/conf.d/credentials.py\u0026#34;- \u0026#34;~/.awx/awxcompose/redis_socket:/var/run/redis/:rw\u0026#34;environment:AWX_SKIP_MIGRATIONS:\u0026#34;1\u0026#34;http_proxy:https_proxy:no_proxy:SUPERVISOR_WEB_CONFIG_PATH:\u0026#39;/etc/supervisord.conf\u0026#39;redis:image:rediscontainer_name:awx_redisrestart:unless-stoppedenvironment:http_proxy:https_proxy:no_proxy:command:[\u0026#34;/usr/local/etc/redis/redis.conf\u0026#34;]volumes:- \u0026#34;~/.awx/awxcompose/redis.conf:/usr/local/etc/redis/redis.conf:ro\u0026#34;- \u0026#34;~/.awx/awxcompose/redis_socket:/var/run/redis/:rw\u0026#34;postgres:image:postgres:12container_name:awx_postgresrestart:unless-stoppedvolumes:- \u0026#34;~/.awx/pgdocker/12/data/:/var/lib/postgresql/data:Z\u0026#34;environment:POSTGRES_USER:awxPOSTGRES_PASSWORD:pgpassPOSTGRES_DB:awxhttp_proxy:https_proxy:no_proxy:volumes:supervisor-socket:rsyslog-socket:rsyslog-config:  References [1]https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#understanding-variable-precedence\n","date":"2022-03-05T00:00:00Z","image":"https://dettonville.github.io/p/ansible-for-app-configuration/header-bg_hue72038640462d3e5ff2fb86f78b4fb63_389666_120x120_fill_q75_box_smart1.jpg","permalink":"https://dettonville.github.io/p/ansible-for-app-configuration/","title":"Ansible methods for configuring application variables"},{"content":"In an effort to resurrect my long neglected blogdown site, I decided to switch to a new theme. It is possible to use blogdown::install_theme() to get you started adding a new theme. But I wanted to do the update manually and then start to modify the theme to suit my needs. For R coders sometimes other languages and interacting with HTML and CSS can be intimidating but the results are very satisfying. I also think that tools like rmarkdown and shiny have forced us to know enough about web languages to work things out. This post is a record of the steps I took to change to and then modify a new Hugo theme, plus some of the small gotcha\u0026rsquo;s I encountered along the way.\nFirst find a good theme On the Hugo themes website there are almost 300 to choose from. The themes website is well designed so it is easy to filter and sort to find the theme you are after. Make sure you find one with good documentation and an example website for you to better understand how it all fits together. Not all documentation is created equally so it is worth taking the time at the start to work through it.\nAnother thing to remember is that themes can have different requirements for structuring your blogs content. So also check the example website\u0026rsquo;s structure to assess how much effort is required to adapt your site.\nIn my work life I generally have to use standard corporate themes. I wanted to try something darker and something good for displaying photos. I also wanted a theme that:\n is responsive and looks good on a phone is good for displaying photos has a good simple search function displays tags nicely  Eventually I decided on the stack theme by Jimmy Cai. Some extra features that clinched the deal were:\n ability to toggle between light and dark themes local search PhotoSwipe integration an archive page template no built in JavaScript or CSS frameworks  This last point, I hope, will lead to less conflicts when adding htmlwidgets to posts.\nImport new theme To import the theme I just followed the documentation and imported the theme using git clone before setting up the theme as a sub-module.\n1 2 3  git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack   These are the usual instructions for adding a theme. But adding the theme as a sub-module is optional. You will need to make some changes to the contents of the theme and you will also want to keep track of these changes in git. Using the code above the sub-module points to the original source, but you may not want to push your changes to this repo.\nAfter a while I removed the sub-module and added the theme to the sites repo. To do this you need to use the git deinit command but you also need to delete cached files from the git repo. I did this based on a Stack Overflow answer which is copied below.\n1 2 3 4 5  mv themes/hugo-theme-stack themes/hugo-theme-stack_tmp git themes/hugo-theme-stack deinit themes/hugo-theme-stack git rm --cached themes/hugo-theme-stack mv themes/hugo-theme-stack_tmp subfolder git add themes/hugo-theme-stack   Update the Config file Now it is time to update your sites config.toml or config.yaml file. Remember we selected a theme that has an example website. So rename your old config file and copy across the one from the new theme example. Then you can go through updating the new config file based on the old one. With luck this will be enough to get your site running using blogdown::build_site() then blogdown::serve_site().\nUpdate site structure At this stage it becomes pretty obvious what is working and what is not. For me, the new theme had a different structure to deal with pages like about. Using the new config file and the structure of the example site I was able to adapt to this pretty easily.\nThe biggest issue I had was trying to update the page logo. This is just a .jpg file for both the old and new theme. It took a long time to realise that the new theme expected this file to be in the themes/hugo-theme-stack/assets/img folder when the old theme expected it to be in static/img. In both cases you refer to the file using img/logo.jpg, so I could not understand what I was doing wrong.\nExploring the Theme contents It is worth having a good idea of the structure and the files in the theme. There will be lots of instances where it is best to make changes in the theme as this will cascade through the site. For example, I wanted to use highlight.js for syntax highlighting. This can be done with 3 lines of code:\n1 2 3  \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/a11y-dark.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;hljs.highlightAll();\u0026lt;/script\u0026gt;   Of course you can add this to each post, but if you add it to the theme it becomes available to all posts. This are where Hugo partial templates become really powerful. A partial is a small html template. On build all of the partials get joined together to form the full page. These small chunks are much easier to maintain and are often parametised and will vary depending on site and page settings and content.\nIn the themes/hugo-theme-stack/layouts/partials/head folder, there is a file called script.html. In the base theme the file is empty but is intended to be modified. There were also files called:\n head.html custom.html style.html  I used the custom.html file to include all the links needed to add a favicon to my site. The svg for the favicon was created in Inkscape, then I used RealFaviconGenerator to convert to a favicon. This is the same service behind pkgdown\u0026rsquo;s pkgdown::build_favicon() function.\nThe last change to the theme I made (for now) was to add the read time for each article at the top of the page. Reading time is available in the Hugo page variable .ReadingTime. Hugo calculates reading time as (words + 212) / 213. After looking through all the files in the theme, I found that the themes/hugo-theme-stack/layouts/partials/article/components/details contained all of the page information such as title, description, and publish date. After finding the place to put the reading time I only need to add the following two span tags to get a book icon and the calculated read time.\n1 2  \u0026lt;span\u0026gt;{{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;book\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;meta__text post-word-count\u0026#34;\u0026gt;{{ .ReadingTime }} min read\u0026lt;/span\u0026gt;   The book icon was not a standard part of the theme. Luckily in the stack theme all of the icons have been generated using Tabler Icons and so it was easy create one that matched perfectly.\nAdd comments In my previous site I used Disqus for comments but this time I wanted to try utterances. Utterances uses Github issues to manage comments. As my site is in a Github repo and is hosted via Github pages, it made sense to have one less account to manage. First the utterances app needs to be installed onto the repo where you want the comments to go. Then you can use the utterances configuration site to generate a code snippet that needs to be inserted into each page.\n1 2 3 4 5 6 7  \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;[ENTER REPO HERE]\u0026#34; issue-term=\u0026#34;pathname\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt;   Again, the stack theme was a good choice as utterances is already part of the theme. All I needed to do to configure was add the code below to the config.yaml.\n1 2 3 4 5 6 7  comments:enabled:trueprovider:utterancesutterances:repo:mrjoh3/blogissueTerm:pathnamelabel:comment  Time to add content And that, as they say, was that. The site is up and running with the new theme. I have made some minor changes to the theme and am quite happy. Really, where I did have issues I should have read the documentation more carefully. At the start of this post I said \u0026ldquo;pick a theme with good documentation and an example site.\u0026rdquo; While updating and modifying the theme I have been referring the the theme documentation regularly. It is always helpful, plus the example site meant I saved an enormous amount of time when restructuring the site to suite the theme.\nNow that I am up and running, I just need to get to the hard part of adding content. Hopefully this post is a good start.\n","date":"2022-01-17T00:00:00Z","image":"https://dettonville.github.io/p/updating-a-blog-theme/header-bg_hue72038640462d3e5ff2fb86f78b4fb63_389666_120x120_fill_q75_box_smart1.jpg","permalink":"https://dettonville.github.io/p/updating-a-blog-theme/","title":"Changing and modifying a Hugo theme on your R Blogdown site"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code       A B C D E F     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien    Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Diff code block 1 2 3 4 5  [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;]   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image \n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://dettonville.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://dettonville.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }   bilibilibi Shortcode \r\rGist Shortcode ","date":"2019-03-10T00:00:00Z","permalink":"https://dettonville.github.io/p/rich-content/","title":"Rich Content"},{"content":"فقرة 1 هذا النص هو مثال لنص يمكن أن يستبدل في نفس المساحة، لقد تم توليد هذا النص من مولد النص العربى، حيث يمكنك أن تولد مثل هذا النص أو العديد من النصوص الأخرى إضافة إلى زيادة عدد الحروف التى يولدها التطبيق. إذا كنت تحتاج إلى عدد أكبر من الفقرات يتيح لك مولد النص العربى زيادة عدد الفقرات كما تريد، النص لن يبدو مقسما ولا يحوي أخطاء لغوية، مولد النص العربى مفيد لمصممي المواقع على وجه الخصوص، حيث يحتاج العميل فى كثير من الأحيان أن يطلع على صورة حقيقية لتصميم الموقع. ومن هنا وجب على المصمم أن يضع نصوصا مؤقتة على التصميم ليظهر للعميل الشكل كاملاً،دور مولد النص العربى أن يوفر على المصمم عناء البحث عن نص بديل لا علاقة له بالموضوع الذى يتحدث عنه التصميم فيظهر بشكل لا يليق. هذا النص يمكن أن يتم تركيبه على أي تصميم دون مشكلة فلن يبدو وكأنه نص منسوخ، غير منظم، غير منسق، أو حتى غير مفهوم. لأنه مازال نصاً بديلاً ومؤقتاً.\nفقرة 2 هذا النص هو مثال لنص يمكن أن يستبدل في نفس المساحة، لقد تم توليد هذا النص من مولد النص العربى، حيث يمكنك أن تولد مثل هذا النص أو العديد من النصوص الأخرى إضافة إلى زيادة عدد الحروف التى يولدها التطبيق. إذا كنت تحتاج إلى عدد أكبر من الفقرات يتيح لك مولد النص العربى زيادة عدد الفقرات كما تريد، النص لن يبدو مقسما ولا يحوي أخطاء لغوية، مولد النص العربى مفيد لمصممي المواقع على وجه الخصوص، حيث يحتاج العميل فى كثير من الأحيان أن يطلع على صورة حقيقية لتصميم الموقع. ومن هنا وجب على المصمم أن يضع نصوصا مؤقتة على التصميم ليظهر للعميل الشكل كاملاً،دور مولد النص العربى أن يوفر على المصمم عناء البحث عن نص بديل لا علاقة له بالموضوع الذى يتحدث عنه التصميم فيظهر بشكل لا يليق. هذا النص يمكن أن يتم تركيبه على أي تصميم دون مشكلة فلن يبدو وكأنه نص منسوخ، غير منظم، غير منسق، أو حتى غير مفهوم. لأنه مازال نصاً بديلاً ومؤقتاً.\nتجربة RTL كلمة 1 Text كلمة 2\n","date":"2019-03-09T00:00:00Z","image":"https://dettonville.github.io/p/%D9%85%D8%AB%D8%A7%D9%84-%D9%86%D8%B5/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://dettonville.github.io/p/%D9%85%D8%AB%D8%A7%D9%84-%D9%86%D8%B5/","title":"مثال نص"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  1 2 3  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}    To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://dettonville.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }  ","date":"2019-03-05T00:00:00Z","image":"https://dettonville.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://dettonville.github.io/p/emoji-support/","title":"Emoji Support"},{"content":"The tutorial section on GitHub deployment 140 describes a rather complex approach using Git subtrees. There are two much simpler approaches which I thought are worth sharing.\nThis is based on the assumption that you are using a project page (no user or organization page, see here 98 for the difference) and that your remote is called “upstream”.\nPublish from /docs folder on master branch As described 48 in the GitHub Pages docs, you can deploy from a folder called docs on your master branch. This requires to change the Hugo publish directory in the site config:\n1  publishDir: \u0026#34;docs\u0026#34;   After running hugo, push your master branch to the upstream repo and choose the docs folder as the website source (\u0026ldquo;Settings \u0026quot; -\u0026gt; “GitHub Pages” -\u0026gt; “Source” -\u0026gt; “master branch /docs folder”). If that option isn’t enabled, you like haven’t pushed your docs folder yet.\nThis is the simplest approach but requires the usage of a non-standard publish directory (GitHub Pages cannot be configured to use another directory than docs currenty). Also the presence of generated files on the master branch may not be to eveyone’s taste.\nDeployment to gh-pages branch The easiest way to sync the state of the public directory with your “gh-pages” branch is to create a clone of your repo under public, commit the changes and push them to the “gh-pages” branch in your local repo:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # remove previous publication rm -rf public mkdir public # clone gh-pages branch from the local repo into a repo located within \u0026#34;public\u0026#34; git clone .git --branch gh-pages public # generate hugo # commit the changes in the clone and push them back to the local gh-pages branch cd public \u0026amp;\u0026amp; git add --all \u0026amp;\u0026amp; git commit -m \u0026#34;Publishing to gh-pages\u0026#34; \u0026amp;\u0026amp; git push origin gh-pages # publish git push upstream gh-pages   That’s my preferred approach as it keeps sources and generated HTML in two different branches, uses the default public folder and also keeps the histories of source branch and “gh-pages” branch fully separated from each other (unlike the subtree approach). Don’t forget to add public to your .gitignore file.\nI’m using a script which does this plus a few sanity checks (work area is clean etc.) which you can find in my repo.\nNote that if you are on Git 2.5 or later, the new worktree feature can be used alternatively, avoiding the cloning of the repo:\n1  git worktree add -B gh-pages public upstream/gh-pages   This checks out the “gh-pages” branch into public, but it’s linked to the local repo. I.e. if you commit the changes in public that affects the local “gh-pages” branch directly, no further push is needed.\n  created Jan \u0026lsquo;17\n  [\nlast reply ](https://discourse.gohugo.io/t/simple-deployment-to-gh-pages/5003/6)\nJul \u0026lsquo;17\n  7.8k\nviews   4\nusers   3\nlikes   5\nlinks     @gunnarmorling This is good stuff and much simple than the gut modules. I think that tutorial was written before a lot of GitHub pages recent improvements (they now make it so that you can basically make any repo a GH Pages site with the click of a button). I think your pointers would be a good addition to the docs.\nThanks! I’ll see whether I can file a pull request for the doc page on GH deployment.\nPlease file a PR. And just replace the page that is there already. I wrote the part about sub trees, and I guess most of it is out of date by now. And it is good to not give the users too many options. Confuses them.\nDelete public folder \u0026gt; create a new empty public folder \u0026gt; clone gh-pages /.git into the public folder \u0026gt; push the public folder to the gh-pages. This method is so simple.\nDo you have any ideas about How to make it quickly I mean (1-click publish to gh-pages)?\nHello! Looks like you’re enjoying the discussion, but you haven’t signed up for an account yet. When you create an account, we remember exactly what you’ve read, so you always come right back where you left off. You also get notifications, here and via email, whenever someone replies to you. And you can like posts to share the love. ","date":"0001-01-01T00:00:00Z","permalink":"https://dettonville.github.io/p/","title":""}]